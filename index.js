var Promise = require("bluebird");
var child_process = require("child_process");
var exec = child_process.exec;
var spawn = child_process.spawn;
function shacheck(path, bs, count) {
    return new Promise(function (resolve, reject) {
        if (bs && count) {
            exec("dd if=" + path + " bs=" + bs + " count=" + count + " | sha1sum ", function (err, stdout, stderr) {
                if (err) {
                    reject(err);
                }
                else if (stderr) {
                    reject(stderr);
                }
                else {
                    resolve(stdout.toString("utf-8"));
                }
            });
        }
        else {
            exec("sha1sum " + path, function (err, stdout, stderr) {
                if (err) {
                    reject(err);
                }
                else if (stderr) {
                    reject(stderr);
                }
                else {
                    resolve(stdout.toString("utf-8"));
                }
            });
        }
    });
}
module.exports = function (source, dest) {
    return new Promise(function (resolve, reject) {
        var disk = false;
        if (source.split("dev/").length == 2) {
            disk = source;
        }
        else if (dest.split("dev/").length == 2) {
            disk = dest;
        }
        if (disk) {
            exec("fdisk -l | grep '" + disk + "' -A 2 ", function (err, stdout, stdin) {
                var fdiskstring = stdout.toString("utf-8");
                var fdisklines = fdiskstring.split("\n");
                var bs = fdisklines[2].replace(/ +(?= )/g, "").split(" ")[0];
                var count = fdisklines[2].replace(/ +(?= )/g, "").split(" ")[0];
                var cmd = "dd if=" + source + " bs=" + bs + " count=" + count + " of=" + dest;
                console.log(cmd);
                shacheck(source, bs, count).then(function (sha1) {
                    exec(cmd, function (err, stdout, stderr) {
                        if (err) {
                            reject(err);
                        }
                        else if (stderr) {
                            reject(stderr);
                        }
                        else {
                            shacheck(dest, bs, count).then(function (sha2) {
                                if (sha1 == sha2) {
                                    resolve(true);
                                }
                                else {
                                    reject("shasum don't match");
                                }
                            }).catch(function (err) {
                                reject(err);
                            });
                        }
                    });
                }).catch(function (err) {
                    reject(err);
                });
            });
        }
        else {
            var cmd = "dd if=" + source + " of=" + dest;
            console.log(cmd);
            shacheck(source).then(function (sha1) {
                exec(cmd, function (err, stdout, stderr) {
                    if (err) {
                        reject(err);
                    }
                    else if (stderr) {
                        reject(stderr);
                    }
                    else {
                        shacheck(dest).then(function (sha2) {
                            if (sha1 == sha2) {
                                resolve(true);
                            }
                            else {
                                reject("shasum don't match");
                            }
                        }).catch(function (err) {
                            reject(err);
                        });
                    }
                });
            }).catch(function (err) {
                reject(err);
            });
        }
    });
};

//# sourceMappingURL=data:application/json;base64,
